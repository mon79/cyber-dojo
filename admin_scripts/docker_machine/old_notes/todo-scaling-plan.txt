
Brief notes from meeting with Jan and Mike 30th July 2015

Step 1: Test works 
Incoming files (for specific animal in specific dojo) are saved 
(can be into a temp folder, but leave as is for now)
A local git-commit happens.
The local git-repo is pushed to a central cyber-dojo git-server 
into a git-repo specific to the dojo+animal. 
Initially this git-server can be on the same machine as the rails server.
Then we issue the magic incantation to spin up a docker process container.
The command this docker process runs will not volume mount anything. It will then

i) git-clone the files from the cyber-dojo git-server into a new local git repo
   (in a temp folder) This is a new step.
ii) build and test (cyber-dojo.sh). Exactly as now
iii) return the output file

cyber-dojo rails server will then proceed exacly as now...
o) save output file
o) save increments.json
o) save manifest.json
o) git-commit and git-tag


Sym-linking
One issue with this approach is how it works with languages that have support 
files. Eg Java/C#. (Full list in notes/todo-features/symlinking-notes.txt)
This is because those languages sym-link
these support files from languages/ to the animals sandbox folder.
I'm not sure if sym-linked files would actully get pushed to the
cyber-dojo-git-server but even if they would its not a good design 
because support files are typically large and not textual.
For example, this approach simply won't work for Java-Cucumber which
has *mountains* of .jar files.
So initially, the new DockerGitServerRunner will need to implement
its runnable?(language) method to only return true if the language
has no support files. 
However, there is considerable appeal to a future feature of 
allowing an animal to add a file (such as a .jar file) to their
session when practising. Perhaps this would fit more naturally
when data-containers have been introduced?

Approval testing
These have an extra post [test] action which is to see what
new .txt files have been produced and to load them back
into the browser. So also initally filter these out in the 
DockerGitServerRunner.runnable?(language) method.

Step 2. Swarm on multiple nodes is now possible.
(Without forking or reverting).

Step 3. Add forking.
This is tricky. Suppose I'm reviewing a traffic-light
from a dojo *before* the switch to no-volume-mount for languages/
A fork will not work. This is because the cyber-dojo.sh
commands assume the support files are in the local sandbox
and now they aren't. 
For example Java-JUnit has this in its cyber-dojo.sh
CLASSES=.:`ls *.jar | tr '\n' ':'`
I think the simplest thing to do in this
case is to #comment out each line in the cyber-dojo.sh file
being forked *from* and to append the contents of the new
cyber-dojo.sh file for that language+test. Assuming they are not
the same. And perhaps also add some comments on why this
has been done. 

Make this work for switching to new docker containers
and no sym-linking. Should then be no need to fixup
refactoring dojo. (Except for C# Yahztee patch)


Step 4. Adding reverting.
How can I handle this during a switch-over of docker containers?
Only an issue when dojo is live. 
Perhaps the simplest way to solve this is to add a time-limit
to dojos. Eg 24 hours after 1st traffic-light.
Expiry also helps read-only dojo hub.


Also to consider. 

The default should be that the git-server is the rails-server.
People building their own servers have to know that by default
they push all the source files to the git-server.
The URL of the git-server needs to be configurable.


Maybe have a single 'External' object
and delegate back to that. It knows the sub objects/classes for 
disk/dir/git etc.



