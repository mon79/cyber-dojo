
Started from digit-ocean droplet
Size: $10/month 
Image: Distributions Ubuntu 14.04 x64


Create a normal user called git
===============================
$ adduser git

Important to give it a strong password to revent
the server being hijacked and used to attack from.

$ whoami
git
$ cd ~
$ pwd
/home/git

Prepare for ssh access files from host OS
=========================================
$ mkdir /home/git/.ssh
$ chown git:git .ssh
$ chmod 700 .ssh

Install git
===========
$ apt-get update
$ apt-get install git


Create /opt/git ready for repos
===============================
$ cd /opt
$ mkdir git
$ chown git:git git


Set up git-daemon
=================
$ apt-get install git-daemon-run

Edited
/etc/service/git-damon/run 
as follows

#!/bin/sh
exec 2>&1
echo 'git-daemon starting'
exec chpst -ugitdaemon \
   "$(git --exec-path)"/git-daemon \
   --reuseaddr --base-path=/opt/git /opt/git

restart the git-daemon
$ reboot


Open ports
==========

git-daemon uses 9418
ssh uses port 22
$ ufw allow 9418     TOO OPEN SEE BELOW
$ ufw allow 22       TOO OPEN SEE BELOW
$ ufw enable         TOO OPEN SEE BELOW

check it
$ ufw status

Got an abuse-compliant from digital-ocean
git user on git-server had been cracked. Password was too weak. Fixed.
How can I generate a random secure password usable inside a bash script?
There are web sites that generate passwords.
Used https://strongpasswordgenerator.com/
Is that in itself safe? How do I know that site is not remembering its passwords?!
http://www.howtogeek.com/howto/30184/10-ways-to-generate-a-random-password-from-the-command-line/
Suggested
< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c${1:-32};echo;


Got a port-scanner attack report from digital-ocean
More learning...
http://www.techworld.com/security/defending-yourself-against-port-scanners-490/
$ ssh root@git-server-ip
$ iptables -nL
Shows...
Chain ufw-user-input (1 references)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9418
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:9418
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:22

So it seems
1. I need to block port 22 (ssh) except from the cyber-dojo server's IP
$ iptables -A INPUT -p tcp -s <CYBER_DOJO_IP> --dport 22 -j ACCEPT
$ iptables -A INPUT -p tcp -s 0.0.0.0/0 --dport 22 -j DROP

2. I should also restrict port 9418 (git-daemon) to the swarm-nodes
$ iptables -A INPUT -p tcp -s <SWARM_NODE_IP> --dport 9418 -j ACCEPT
$ iptables -A INPUT -p tcp -s <SWARM_NODE_IP> --dport 9418 -j ACCEPT
$ iptables -A INPUT -p tcp -s 0.0.0.0/0 --dport 9418 -j DROP


$ iptables -nL
...Now shows
ACCEPT     tcp  --  CYBER_DOJO_IP        0.0.0.0/0            tcp dpt:22
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22
ACCEPT     tcp  --  SWARM_NODE_IP        0.0.0.0/0            tcp dpt:9418
ACCEPT     tcp  --  SWARM_NODE_IP        0.0.0.0/0            tcp dpt:9418
DROP       tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9418

....and towards the end of the file
Chain ufw-user-input (1 references)
target     prot opt source               destination         
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:9418
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:9418
ACCEPT     tcp  --  0.0.0.0/0            0.0.0.0/0            tcp dpt:22
ACCEPT     udp  --  0.0.0.0/0            0.0.0.0/0            udp dpt:22

https://help.ubuntu.com/community/IptablesHowTo
Once a decision is made to accept a packet, no more rules affect it. As our rules allowing ssh and web traffic come first, as long as our rule to block all traffic comes after them, we can still accept the traffic we want. All we need to do is put the rule to block all traffic at the end.





Notes
=====

I also added gitdaemon to git's group
$ usermod -a -G git gitdaemon
but I don't think this was anything to do with it.
git-daemon logging is in /var/log/gitdaemon

git clone works from the cyber-dojo server this like...
$ git clone git://192.168.59.103/F9/BD34609D/moose.git

To specify the git daemon can serve each .git repo I need to
$ cd opt/git/F9/BD34609D/moose.git
$ touch git-daemon-export-ok
This is done from the cyber-dojo server.

There is an option on git clone to specify the folder you want to clone into.
Using that in cyber-dojo servers docker run command 

timeout cannot be given 'cd' as its command. See 
$ info coreutils 'timeout invocation'

One potential issue with having a password-less, ssh-less git-server
giving git clone read-access is that it could become the bottleneck
instead of the docker container...

Did not change the git-server login-shell for the git user to /usr/bin/git-shell
since that would prevent the scp I need (as each avatar enters)


git-server === rails-server
===========================
If I edit
/etc/service/git-damon/run 
as follows

#!/bin/sh
exec 2>&1
echo 'git-daemon starting'
exec chpst -ugitdaemon \
   "$(git --exec-path)"/git-daemon \
   --reuseaddr --base-path=/var/www/cyber-dojo/katas /var/www/cyber-dojo/katas


Will this mean I do not have to clone the git repo?
I think I need two DockerGitCloneRunner.rb files
one for separate git-server and one for co-incident git-server.
  DockerSeparateGitServerGitCloneRunner.rb
  DockerSharedGitServerGitCloneRunner.rb
Or just leave it as is and accept slight overhead if you
are using shared server?

Don' use git-daemon-export-all
Stick to git-daemon-export-ok per repo.
This is because on a rails-git shared server I want
to ensure the repo for cyber-dojo itself is not
available to clone from the cyber-dojo server!


